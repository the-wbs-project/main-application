import { Component, ViewChild, ViewEncapsulation } from '@angular/core';
import {
  DropTargetEvent,
  DragTargetContainerDirective,
  DropTargetContainerDirective,
} from '@progress/kendo-angular-utils';
import { GridComponent } from '@progress/kendo-angular-grid';
import { Product } from './model';
import { products } from './products';
import { calculateDestinationIndex } from './utils';
import { ListViewComponent } from '@progress/kendo-angular-listview';

@Component({
  selector: 'my-app',
  template: `
    <div
      class="demo-container"
      #wrapper
      kendoDragTargetContainer
      kendoDropTargetContainer
      dragTargetFilter=".k-master-row, .k-listview-item"
      dropTargetFilter=".k-master-row, .k-listview-item"
      [dragData]="dragData"
      [hint]="{ hintClass: 'rowHint' }"
      (onDrop)="onDrop($event)"
      dragHandle=".k-i-reorder"
    >
      <kendo-grid
        class="demo-grid"
        [data]="inStockData"
        data-kendo-grid-index="0"
      >
        <kendo-grid-column [width]="40">
          <ng-template kendoGridCellTemplate>
            <span class="k-icon k-i-reorder"></span>
          </ng-template>
        </kendo-grid-column>
        <kendo-grid-column
          [width]="185"
          field="ProductName"
          title="Product Name"
        ></kendo-grid-column>
        <kendo-grid-column
          [width]="60"
          field="UnitPrice"
          title="Price"
        ></kendo-grid-column>
        <kendo-grid-column [width]="95" field="Discontinued" title="In Stock">
          <ng-template kendoGridCellTemplate>
            <span
              class="k-badge k-badge-solid k-badge-solid-success k-badge-md k-rounded-md k-badge-inline"
              >Available</span
            >
          </ng-template>
        </kendo-grid-column>
      </kendo-grid>

      <kendo-listview
        class="demo-listview"
        [data]="discontinuedData"
        [itemClass]="{ 'item-border': true }"
        data-kendo-listview-index="0"
      >
        <ng-template kendoListViewItemTemplate let-dataItem="dataItem">
          <div class="item">
            <span class="k-icon k-i-reorder"></span>
            <span>{{ dataItem.ProductName }}</span>
            <span
              class="k-badge k-badge-solid k-badge-solid-error k-badge-md k-rounded-md k-badge-inline"
              *ngIf="dataItem.Discontinued"
              >Not Available</span
            >
          </div>
        </ng-template>
      </kendo-listview>
    </div>
  `,
  styleUrls: ['styles.css'],
  encapsulation: ViewEncapsulation.None,
})
export class AppComponent {
  public inStockData: Product[] = products.filter((i) => !i.Discontinued);
  public discontinuedData: Product[] = products.filter((i) => i.Discontinued);

  @ViewChild('wrapper', { read: DragTargetContainerDirective })
  dragTargetContainer;
  @ViewChild('wrapper', { read: DropTargetContainerDirective })
  dropTargetContainer;

  @ViewChild(GridComponent) public grid;
  @ViewChild(ListViewComponent) public listview;

  public dragData = ({ dragTarget }) => {
    if (dragTarget instanceof HTMLDivElement) {
      return {
        fromElement: this.setElement(
          dragTarget,
          '.k-listview',
          'data-kendo-listview-index'
        ),
        fromIndex: +dragTarget.getAttribute('data-kendo-listview-item-index'),
      };
    } else if (dragTarget instanceof HTMLTableRowElement) {
      return {
        fromElement: this.setElement(
          dragTarget,
          '.k-grid',
          'data-kendo-grid-index'
        ),
        fromIndex: +dragTarget.getAttribute('data-kendo-grid-item-index'),
      };
    }
  };

  public onDrop(e: DropTargetEvent): void {
    const { fromElement, fromIndex } = e.dragData;

    let toElement;
    let destinationIndex = 0;

    if (
      (e.dragTarget instanceof HTMLDivElement &&
        e.dropTarget instanceof HTMLTableRowElement) ||
      (e.dragTarget instanceof HTMLTableRowElement &&
        e.dropTarget instanceof HTMLTableRowElement)
    ) {
      toElement = this.setElement(
        e.dropTarget,
        '.k-grid',
        'data-kendo-grid-index'
      );

      destinationIndex = calculateDestinationIndex(
        e,
        fromElement,
        fromIndex,
        toElement
      );

      if (e.dragTarget instanceof HTMLDivElement) {
        this.updateData(
          this.listview.data as Product[],
          this.grid.data as Product[],
          fromIndex,
          destinationIndex,
          this.discontinuedData,
          this.inStockData
        );
      } else {
        this.updateData(
          this.grid.data as Product[],
          this.grid.data as Product[],
          fromIndex,
          destinationIndex,
          this.discontinuedData,
          this.inStockData
        );
      }
    } else if (
      (e.dragTarget instanceof HTMLTableRowElement &&
        e.dropTarget instanceof HTMLDivElement) ||
      (e.dragTarget instanceof HTMLDivElement &&
        e.dropTarget instanceof HTMLDivElement)
    ) {
      toElement = this.setElement(
        e.dropTarget,
        '.k-listview',
        'data-kendo-listview-item-index'
      );
      destinationIndex = calculateDestinationIndex(
        e,
        fromElement,
        fromIndex,
        toElement
      );

      if (e.dragTarget instanceof HTMLTableRowElement) {
        this.updateData(
          this.grid.data as Product[],
          this.listview.data as Product[],
          fromIndex,
          destinationIndex,
          this.inStockData,
          this.discontinuedData
        );
      } else {
        this.updateData(
          this.listview.data as Product[],
          this.listview.data as Product[],
          fromIndex,
          destinationIndex,
          this.inStockData,
          this.discontinuedData
        );
      }
    }

    this.discontinuedData = [...this.discontinuedData];
    this.inStockData = [...this.inStockData];

    this.dragTargetContainer.notify();
    this.dropTargetContainer.notify();
  }

  public setElement(target, selector, attribute) {
    return +target.closest(selector).getAttribute(attribute);
  }

  public updateData(
    fromCollection,
    toCollection,
    fromIndex,
    toIndex,
    dataFromCollection,
    dataToCollection
  ) {
    const dataItem = fromCollection[fromIndex];
    fromCollection.splice(fromIndex, 1);
    dataFromCollection = fromCollection;

    if (fromCollection !== toCollection) {
      dataItem.Discontinued = !dataItem.Discontinued;
    }

    toCollection.splice(toIndex, 0, dataItem);
    dataToCollection = toCollection;
  }
}
