# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - main

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

jobs:
  - job: resource_job
    pool:
      vmImage: ubuntu-latest
    displayName: Resources
    steps:
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "files"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "publish/resources/$(Build.BuildId)-Resources.zip"
          replaceExistingArchive: true
        displayName: "Zip"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "publish/resources/"
          ArtifactName: "drop"
          publishLocation: "Container"
        displayName: "Publish"

  - job: api_job
    pool:
      vmImage: ubuntu-latest
    displayName: ASP.NET API
    steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: "publish"
          publishWebProjects: false
          projects: "./server/api/api.csproj"
          arguments: "-o ./server/api/dist"
          zipAfterPublish: false
          modifyOutputPath: true
        displayName: "Build"

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "server/api/dist/api"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Api.zip"
          replaceExistingArchive: true
        displayName: "Zip"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "drop"
          publishLocation: "Container"
        displayName: "Publish"

  - job: functions_job
    pool:
      vmImage: ubuntu-latest
    displayName: Azure Functions
    steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: "publish"
          publishWebProjects: false
          projects: "./server/functions/functions.csproj"
          arguments: "-o ./server/functions/dist"
          zipAfterPublish: false
          modifyOutputPath: true
        displayName: "Build"

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "server/functions/dist/functions"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Functions.zip"
          replaceExistingArchive: true
        displayName: "Zip"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "drop"
          publishLocation: "Container"
        displayName: "Publish"

  - job: worker_job
    pool:
      vmImage: ubuntu-latest
    displayName: Workers
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "22.0"
        displayName: "Install Node.js"

      - script: npm install --global typescript
        displayName: "Install TypeScript"

      - script: npm run deploy:install
        workingDirectory: "server/workers"
        displayName: "Install"

      - script: npm run check
        workingDirectory: "server/workers/worker-auth"
        displayName: "Check Auth"

      - script: npm run check
        workingDirectory: "server/workers/worker-api"
        displayName: "Check API"

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "server/workers/worker-auth"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Worker-Auth.zip"
          replaceExistingArchive: true
        displayName: "Zip Auth"

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "server/workers/worker-api"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Worker-Api.zip"
          replaceExistingArchive: true
        displayName: "Zip API"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "drop"
          publishLocation: "Container"
        displayName: "Publish"

  - job: site_job
    pool:
      vmImage: ubuntu-latest
    displayName: Site Prod
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "20.9"
        displayName: "Install Node.js"

      - script: |
          echo "$(FA_LICENSE)"
          npm config set "@fortawesome:registry" https://npm.fontawesome.com/ && npm config set "//npm.fontawesome.com/:_authToken" $(FA_LICENSE)
        workingDirectory: "site"
        env:
          FA_LICENSE: $(FA_LICENSE)
        displayName: "Setup - Font Awesome Registry"

      - script: npm install --global @angular/cli
        displayName: "Setup - Angular CLI"

      - script: npm install --force
        workingDirectory: "site"
        displayName: "Setup - Site Packages"

      - script: npx kendo-ui-license activate
        workingDirectory: "site"
        env:
          KENDO_UI_LICENSE: $(KENDO_UI_LICENSE)
        displayName: "Setup - Kendo UI License"

      - script: npm run deploy
        workingDirectory: "site"
        displayName: "Build"

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "site/dist/site"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Site.zip"
          replaceExistingArchive: true
        displayName: "Zip"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "drop"
          publishLocation: "Container"
        displayName: "Publish"
